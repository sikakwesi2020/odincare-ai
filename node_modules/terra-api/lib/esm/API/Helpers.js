import fetch from 'cross-fetch';
import { createHmac } from 'crypto';
function ZeroPad(value, minSize) {
    return '0'.repeat(Math.max(minSize - value.toString().length, 0)) + value.toString();
}
export function DateToTerraDate(d) {
    const month = d.getUTCMonth() + 1; // months from 1-12
    const day = d.getUTCDate();
    const year = d.getUTCFullYear();
    return year + '-' + ZeroPad(month, 2) + '-' + ZeroPad(day, 2);
}
export function RequestWrapper(endpoint, requestOptions, requestParams = {}) {
    checkForServerSideAndWarn();
    return new Promise((res, rej) => {
        const params = new URLSearchParams();
        Object.entries(requestParams).forEach(([k, v]) => params.append(k, v));
        const url = 'https://api.tryterra.co/v2/' + endpoint + (params ? '?' + params.toString() : '');
        fetch(url, requestOptions)
            .then((response) => {
            if (response.status === 500 || response.status === 502) {
                rej({
                    status: 'error',
                    type: 'internal_server_error',
                    message: response.status.toString(),
                });
                return;
            }
            response
                .json()
                .then((result) => (response.ok ? res(result) : rej(result)))
                .catch((error) => rej({
                status: 'error',
                type: 'unknown',
                message: error,
            }));
        })
            .catch((error) => rej({
            status: 'error',
            type: 'unknown',
            message: error,
        }));
    });
}
export function checkForServerSideAndWarn() {
    if (typeof process !== 'undefined' && process.release.name.search(/node|io.js/) !== -1) {
        // This is good, we are running in node
    }
    else {
        // tslint:disable-next-line:no-console
        console.warn('This script is not running in Node.js which means this is probably running on the client side which means you are exposing your API Key which is very dangerous');
    }
}
export function CheckTerraSignature(terraSignature, payload, secret) {
    const s = terraSignature.split(',');
    const t = s[0].split('=')[1];
    const v1 = s[1].split('=')[1];
    const hmac = createHmac('sha256', secret)
        .update(t + '.' + payload)
        .digest('hex');
    return hmac === v1;
}
